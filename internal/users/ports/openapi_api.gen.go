// Package ports provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package ports

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns all users
	// (GET /api/users)
	FindAllUsers(w http.ResponseWriter, r *http.Request)
	// Creates a new user
	// (POST /api/users)
	AddUser(w http.ResponseWriter, r *http.Request)
	// Deletes a user by ID
	// (DELETE /api/users/{id})
	DeleteUser(w http.ResponseWriter, r *http.Request, id string)
	// Returns a user by ID
	// (GET /api/users/{id})
	FindUserByID(w http.ResponseWriter, r *http.Request, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// FindAllUsers operation middleware
func (siw *ServerInterfaceWrapper) FindAllUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindAllUsers(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// AddUser operation middleware
func (siw *ServerInterfaceWrapper) AddUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddUser(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// FindUserByID operation middleware
func (siw *ServerInterfaceWrapper) FindUserByID(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		http.Error(w, fmt.Sprintf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindUserByID(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL     string
	BaseRouter  chi.Router
	Middlewares []MiddlewareFunc
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users", wrapper.FindAllUsers)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/users", wrapper.AddUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/users/{id}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/users/{id}", wrapper.FindUserByID)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RVQW/zNgz9KwK3oxGn7Q6FT0uXDcilG7blVOSgWkyiQZZUiW4XBP7vHyjZaROnLQoU",
	"Hwp8p9gyKT6+R77soXaNdxYtRaj2EOstNjI9/h6CC/zgg/MYSGM6rp1C/lUY66A9aWehysEifStg7UIj",
	"CSrQlq4uoQDaecyvuMEAXQENxig3r140fD6kRgrabqDrCgj40OqACqo76AsO4auugFt8WkY8A9zK5ky9",
	"W9mgcGtBWxQt541KFkByM078d+ffSTzBmuozwgGeNObPNVR3e/g54Boq+Kl8FqPslSiHfrritCGtxqiW",
	"Vj+0KLQ6gXaQpG21eheqVrDqVh0fa7t2WXZLsiZ+xEZqAxWECWMM9zLQ9lddG9eqSe0aKHqq4W93j4HE",
	"P4coJvMY70xE2XiDog6tErO/FoxNk+F0bls00soNNmgJCnjEEHPexWQ6mfJ1zqOVXkMFV+moAC9pm/gp",
	"pdcl95/eNpjAM4GSiy8UVPCHtmpmzDIFMQfROxszvZfT6dA4V2fBvDe6Ttnlf5FxDAuT5CBsUuJbavZS",
	"DvzLEOQOEtHHvCTYYsCTeVvL1tCHIL2FJK/3udIW//dYEyqBfUwBsW0aGXYsKlIbbBTSGJHJ7QrwLp5h",
	"d6bUMo8fDxdGunFq92kNHBZj3EKaHKmUICciuYDwcr4ptNiNxL74NGCvoWK2vqSkvwWUhFFIYfEpOwYH",
	"PO9Pudeqy2ZjkM64aD7nG6K2G5NtR9zLiEo4m4xoMRex5daQ/ed4UOYpvZ8VL4NskNLa3p0WWszZ2NLt",
	"5EQPh10KqrT4z+aTbO5Y9OIFj+8Z4mo0IL+M2044Mgj1lQSdH+TIOuzEYs74eg88vuuw0CeiHbRczEeC",
	"sW+yXDe79PEDkq2R6u13Umz64670qah5AlIMhsdBqDbw//iWyFdlaVwtzdZFqq6n11PoVt23AAAA//8O",
	"5YOHHQoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
